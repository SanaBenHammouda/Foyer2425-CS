name: SonarQube analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read  # Allows SonarQube to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up Java 17 (required by SonarQube if it's compiled with Java 17)
      - name: Set up JDK 
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Use Java 17
          distribution: 'zulu'  # You can also use 'zulu' or others if needed

      # Step 2: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 3: Run SonarQube analysis
      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for PR info
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # SonarQube token, created and added in GitHub Secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube instance URL
        with:
          args:
            # Unique key for your project in SonarQube
            -Dsonar.projectKey=Devops-spring-project
            # Optional: Specify main source directory, if needed
            #-Dsonar.sources=src/main/java
            # Optional: Specify test source directory, if needed
            #-Dsonar.tests=src/test/java
            # Optional: Specify base directory if your project isn't in the root
            #-Dsonar.projectBaseDir=./subdir
            # Optional: Enable debug mode for more verbose logs
            #-Dsonar.verbose=true
